import pandas as pd
from sklearn.model_selection import train_test_split
from sklearn.ensemble import RandomForestRegressor
from sklearn.metrics import mean_squared_error, r2_score
import joblib
import os
import argparse

# Parse input arguments
parser = argparse.ArgumentParser()
parser.add_argument("--mobile_data", type=str, required=True, help="Path to mobile data")
args = parser.parse_args()

# Load dataset with explicit encoding
try:
    # Try UTF-8 first, fall back to latin1 if it fails
    try:
        data = pd.read_csv(args.mobile_data, encoding="utf-8")
    except UnicodeDecodeError:
        print("UTF-8 decoding failed, trying latin1...")
        data = pd.read_csv(args.mobile_data, encoding="latin1")
except Exception as e:
    print(f"Failed to load dataset: {e}")
    raise

# Preprocessing
try:
    data['Battery Capacity'] = data['Battery Capacity'].str.replace(',', '').str.replace('mAh', '').astype(float)
    data['Mobile Weight'] = data['Mobile Weight'].str.replace('g', '').astype(float)
    data['Launched Year'] = data['Launched Year'].astype(int)
    # Handle 'Launched Price (USA)' with commas
    data['Launched Price (USA)'] = data['Launched Price (USA)'].str.replace('USD ', '').str.replace(',', '').astype(float)
except Exception as e:
    print(f"Error in preprocessing: {e}")
    raise

# Selecting relevant features
X = data[['Mobile Weight', 'RAM', 'Battery Capacity', 'Launched Year']]
y = data['Launched Price (USA)']

# Split into train and test sets
X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)

# Train the model
model = RandomForestRegressor(n_estimators=100, random_state=42)
model.fit(X_train, y_train)

# Evaluate the model
y_pred = model.predict(X_test)
print(f"Mean Squared Error: {mean_squared_error(y_test, y_pred)}")
print(f"R^2 Score: {r2_score(y_test, y_pred)}")

# Save the model to the outputs directory
output_dir = os.environ.get("AZUREML_OUTPUTS_DEFAULT", ".")
os.makedirs(output_dir, exist_ok=True)
model_path = os.path.join(output_dir, "mobile_price_predictor.pkl")
joblib.dump(model, model_path)
print(f"Model saved to {model_path}")
